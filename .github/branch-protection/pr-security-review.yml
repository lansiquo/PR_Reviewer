name: pr-security-review

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.png'
      - '**/*.jpg'
      - '.github/branch-protection/**'

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

concurrency:
  group: pr-security-review-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  semgrep:
    name: semgrep
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional: cache to speed up Semgrep rule downloads
      - name: Cache semgrep
        uses: actions/cache@v4
        with:
          path: ~/.semgrep
          key: semgrep-${{ runner.os }}-v1

      - name: Install Semgrep
        run: pipx install semgrep

      - name: Compute changed range
        id: range
        run: |
          echo "base_ref=${{ github.base_ref || 'main' }}" >> "$GITHUB_OUTPUT"
          echo "head_sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Semgrep (delta with safety limits)
        id: scan
        run: |
          semgrep scan \
            --config rules/ \
            --changed-since origin/${{ steps.range.outputs.base_ref }} \
            --exclude node_modules --exclude dist --exclude .git \
            --max-target-bytes 200MB \
            --timeout 300 \
            --json --output semgrep.json \
            --sarif --output results.sarif \
            --error --jobs auto
        # If you prefer warn-only initially, drop --error and handle fail below.

      - name: Upload SARIF to Code Scanning
        if: always() && hashFiles('results.sarif') != ''
        run: |
          gh code-scanning upload-sarif \
            --commit-sha "$GITHUB_SHA" \
            --ref "$GITHUB_REF" \
            --sarif-file results.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Make the job clearly pass/fail, not hang
      - name: Set conclusion
        if: always()
        run: |
          # Fail if Semgrep step failed; otherwise succeed
          if [ "${{ steps.scan.outcome }}" = "failure" ]; then
            echo "Semgrep reported errors or findings (with --error). Failing job."
            exit 1
          fi
